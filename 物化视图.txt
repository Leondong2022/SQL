-- 物化视图
-- 要想创建 "物化视图，至少具有 ‘CREATE MATERIALIZED VIEW’ 权限"
grant create materialized view to scott; -- 授权
revoke create materialized view from scott; -- 回收

-- 2 语法
-- 2.1 创建
/*
create materialized view 物化视图名        -- 1. 创建物化视图
build [immediate | deferred] 			  -- 2. 创建方式，默认 immediate
refresh [force | fast | complete | never] -- 3. 物化视图刷新方式，默认 force
on [commit | demand] 					  -- 4. 刷新触发方式
start with 开始时间						  -- 5. 设置开始时间
next 间隔时间				              -- 6. 设置间隔时间
with [primary key | rowid]                -- 7. 类型，默认 primary key
[enable | disable] query rewrite          -- 8. 是否启用查询重写
as	                                      -- 9. 关键字
查询语句;                                  -- 10. select 语句
*/

-- 语法解释：
-- 1. "创建 build" 的方式
-- 	(1) 'immediate'：立即生效，默认。
-- 	(2) 'deferred' : 延迟至第一次 refresh 时才生效
-- 2. "刷新 refresh" 的方式
-- 	(1) force	：默认。如果可以 '快速刷新' 就 '快速刷新'，否则执行 '完全刷新'
-- 	(2) fast	：'快速刷新'。只刷新 '增量' 部分（前提：创建 '物化日志'）
-- 	(3) complete: '完全刷新'。刷新时更新全部数据，包括视图中已经生成的原有数据
-- 	(4) never	: 从不刷新
-- 3. "触发" (请注意，on demand 中，才需要设置 '开始时间' 和 '间隔时间') -- 冲突
-- 	(1) on commit：基表有 commit 动作时，刷新刷图（"不能跨库执行"）
-- 	(2) on demand：在需要时刷新
-- 			       [1] 根据后面设定的 '开始时间' 和 '结束时间' 进行刷新
-- 			       [2] 手动调用 dbms_mview 包中的过程进行刷新
-- 4. 基于基表的 primary key 或 rowid 创建
-- 	(1) 如果是基于 rowid，则不能对基表执行 '分组函数'、'多表连接' 等需要把
-- 	    多个 rowid 合成一行的操作（理由很简单：到底以哪个 rowid 为准呢？）
-- 5. enable query rewrite 启用查询重写（请注意， '开始时间' 和 '间隔时间' 不支持）-- 冲突
-- 	(1) 不支持的理由也很简单。
-- 		所谓的 '重写'，就是讲对基表的查询定位到物化视图上，
-- 		而 '开始时间' 和 '间隔时间' 会造成物化视图上部分数据延迟，所以，不能重写
-- 	(2) 参数: query_rewrite_enabled (可通过 v$parameter 视图查询)

-- 示例：通过物化视图，每 3 分钟，同步一次基表数据（用户 scott）
-- 1. 先创建基表 person_info，并插入几条数据
DROP TABLE PERSON_INFO;
CREATE TABLE person_info (
  person_no   VARCHAR2(10),
  NAME        VARCHAR2(30),
  create_date DATE
);
INSERT INTO person_info(person_no, NAME, create_date) VALUES('001', '瑶瑶', SYSDATE);
INSERT INTO person_info(person_no, NAME, create_date) VALUES('002', '倩倩', SYSDATE);
COMMIT;
SELECT * FROM person_info;

-- 2. 创建物化视图：每 1 分钟刷新一次
DROP MATERIALIZED VIEW person_info_mvw;
CREATE  MATERIALIZED VIEW person_info_mvw
BUILD IMMEDIATE
REFRESH FORCE
ON DEMAND
START WITH SYSDATE
NEXT SYSDATE + 1/1440
AS
SELECT pi.person_no,
       pi.name,
       pi.create_date
  FROM person_info pi;


-- 测试语句：先查询，等个十几秒在执行 insert，再等 3 分钟左右，观察前后数据
SELECT t.* FROM person_info_mvw t;
INSERT INTO person_info(person_no, NAME, create_date) VALUES('003', '优优', SYSDATE);
COMMIT;
select * from person_info;
-- 在system用户下查询该物化图
select upper('person_info_mvw') from DUAL;
SELECT *
  FROM dba_mviews t
 WHERE t.owner = 'SCOTT'
   AND t.mview_name = 'PERSON_INFO_MVW';
-- 在创建用户下查询该视图；
SELECT * FROM PERSON_INFO_MVW;

-- 2.3 修改
-- alter materialized view 物化视图名
-- refresh [force | fast | complete | never]
-- on [commit | demand]
-- start with 开始时间
-- next 间隔时间

-- 2.4 删除
-- drop materialized view 物化视图名;

-- 3 扩展
-- 3.1 手动刷新
BEGIN
   dbms_mview.refresh(list                 => '视图名',
                      method               => 'fast', -- 增量刷新
                      refresh_after_errors => TRUE);
END;

--首先来创建一个物化视图
create table emp_test as  select * from emp;
select * from emp_test;
insert into emp_test(EMPNO) values (1111);
insert into emp_test(EMPNO) values (2222);
commit ;

alter table emp_test add constraint pk_test primary key (EMPNO);
Create materialized view log on emp_test;
select * from mlog$_emp_test;

create materialized view mv_emp_test
refresh fast on commit                  --on commit 必须创建物化视图日志
as
select * from emp_test;

select * from mv_emp_test;
--实时更新的物化视图：
-- Create materialized view 物化视图的名称
-- Refresh complete|fast|force on commit
-- As
-- Select 查询语句;

-- 物化视图和视图的区别是什么？
-- 1.视图是虚拟的表格，物化视图是真实的表格
-- 2.视图在一定的条件下，可以修改并且影响源表的数据；物化视图本身不能进行任何的修改
-- 3.视图会跟着源表实时更新，物化视图可以定时更新和强制更新
-- 4.视图的查询要受到原来的select语句的影响，物化视图只需要查询当前表格拥有的数据
-- 5.物化视图还可以添加索引，进行查询的加速